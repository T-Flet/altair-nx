[build-system]
requires = ['hatchling', 'hatch-vcs']
build-backend = 'hatchling.build'


[project]
name = 'altair-nx'
authors = [
  { name = 'Thomas Fletcher', email = 'T-Fletcher@outlook.com' },
  { name = 'Zach Sailer', email = 'zachsailer@gmail.com' },
]
description = 'Draw interactive NetworkX graphs with Altair'
readme = 'README.md'
license.file = 'LICENSE'
requires-python = '>=3.10'
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Science/Research',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Operating System :: OS Independent',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Topic :: Scientific/Engineering',
  'Typing :: Typed',
]
dynamic = ['version']
dependencies = [
  'altair>=5.0.0',
  'networkx>=3.0',
  'pandas>=2.0.0'
]

[project.optional-dependencies]
test = [
  'pytest >=6',
  'pytest-cov >=3',
]
dev = [
  'pytest >=6',
  'pytest-cov >=3',
]
docs = [
  'sphinx>=7.0',
  'myst_parser>=0.13',
  'sphinx_copybutton',
  'sphinx_autodoc_typehints',
  'furo>=2023.08.17',
]

[project.urls]
Homepage = 'https://github.com/T-Flet/altair-nx'
Documentation = 'https://altair-nx.readthedocs.io/en/stable'
'Bug Tracker' = 'https://github.com/T-Flet/altair-nx/issues'
Discussions = 'https://github.com/T-Flet/altair-nx/discussions'
Changelog = 'https://github.com/T-Flet/altair-nx/releases'


[tool.hatch]
version.source = 'vcs'
build.hooks.vcs.version-file = 'src/altair_nx/_version.py'

[tool.hatch.envs.default]
features = ['test']
scripts.test = 'pytest {args}'


[tool.pytest.ini_options]
minversion = '6.0'
addopts = ['-ra', '--showlocals', '--strict-markers', '--strict-config']
xfail_strict = true
filterwarnings = [
  'error',
]
log_cli_level = 'INFO'
testpaths = [
  'tests',
]


[tool.coverage]
run.source = ['altair_nx']
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ['src', 'tests']
python_version = '3.8'
warn_unused_configs = true
strict = true
enable_error_code = ['ignore-without-code', 'redundant-expr', 'truthy-bool']
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = 'altair_nx.*'
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ['src']

[tool.ruff.lint]
extend-select = [
  'B',        # flake8-bugbear
  'I',        # isort
  'ARG',      # flake8-unused-arguments
  'C4',       # flake8-comprehensions
  'EM',       # flake8-errmsg
#  'ICN',      # flake8-import-conventions
  'G',        # flake8-logging-format
  'PGH',      # pygrep-hooks
  'PIE',      # flake8-pie
#  'PL',       # pylint
  'PT',       # flake8-pytest-style
  'PTH',      # flake8-use-pathlib
  'RET',      # flake8-return
  'RUF',      # Ruff-specific
  'SIM',      # flake8-simplify
  'T20',      # flake8-print
  'UP',       # pyupgrade
  'YTT',      # flake8-2020
  'EXE',      # flake8-executable
  'NPY',      # NumPy specific rules
  'PD',       # pandas-vet
]
ignore = [
  'PLR09',    # Too many <...>
  'PLR2004',  # Magic value used in comparison
  'ISC001',   # Conflicts with formatter
]
isort.required-imports = ['from __future__ import annotations']
# Uncomment if using a _compat.typing backport
# typing-modules = ['altair_nx._compat.typing']

[tool.ruff.lint.per-file-ignores]
'tests/**' = ['T20']
'noxfile.py' = ['T20']


[tool.pylint]
py-version = '3.8'
ignore-paths = ['.*/_version.py']
reports.output-format = 'colorized'
similarities.ignore-imports = 'yes'
messages_control.disable = [
  'design',
  'fixme',
  'line-too-long',
  'missing-module-docstring',
  'missing-function-docstring',
  'wrong-import-position',
]
